{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\energ\\\\Documents\\\\GitHub\\\\music-app\\\\client\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useLocation } from 'react-router';\nimport styled from 'styled-components';\nimport GlobalStyles from './GlobalStyles';\nimport './App.css';\nimport { getSongData, getArtistData, getRandomSongs } from './services/lyrics';\nimport Loader from './components/Loader';\nimport SearchBar from './components/SearchBar';\nimport SwitchSection from './components/SwitchSection';\nimport appLogo from './components/Nav/img/appLogo.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [loadingStatus, setLoadingStatus] = useState(false);\n  const [data, setData] = useState(null);\n  const location = useLocation(); // Have you ever had lyrics of a song stuck in your head that you cant recall the name of?\n\n  const fetchData = async (id, type) => {\n    switch (type) {\n      case 'song':\n        return await getSongData(id);\n\n      case 'artist':\n        return await getArtistData(id);\n\n      default:\n        return null;\n    }\n  };\n\n  const handleDataChange = async (id, type) => {\n    window.location.pathname = `/${type}/${id}`;\n  };\n\n  useEffect(() => {\n    async function handleFetchData() {\n      setLoadingStatus(true);\n\n      try {\n        setData(await fetchData(location.pathname.split('/')[2], location.pathname.split('/')[1]));\n      } catch (error) {\n        setData({\n          _type: 'error',\n          content: '404'\n        });\n      }\n\n      setLoadingStatus(false);\n    }\n\n    handleFetchData();\n  }, [location]);\n  return /*#__PURE__*/_jsxDEV(AppContainer, {\n    children: [/*#__PURE__*/_jsxDEV(GlobalStyles, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AppLogo, {\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: appLogo,\n          alt: \"scuffed spotify\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), \" Spotifi\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      setData: handleDataChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), loadingStatus ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }, this) : data && /*#__PURE__*/_jsxDEV(SwitchSection, {\n      data: data,\n      handleSelect: handleDataChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"eLL+YlRK6qPZ/5oUwdjdVNHTJPA=\", false, function () {\n  return [useLocation];\n});\n\n_c = App;\nconst AppContainer = styled.div`\n  padding: 0 1em 1em 1em;\n  margin: 0;\n`;\n_c2 = AppContainer;\nconst AppLogo = styled.nav`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 1em 0;\n  cursor: pointer;\n  column-gap: 0.2em;\n\n  & > img {\n    height: 2em;\n    width: auto;\n  }\n`;\n_c3 = AppLogo;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"AppContainer\");\n$RefreshReg$(_c3, \"AppLogo\");","map":{"version":3,"sources":["C:/Users/energ/Documents/GitHub/music-app/client/src/App.js"],"names":["useEffect","useState","Link","useLocation","styled","GlobalStyles","getSongData","getArtistData","getRandomSongs","Loader","SearchBar","SwitchSection","appLogo","App","loadingStatus","setLoadingStatus","data","setData","location","fetchData","id","type","handleDataChange","window","pathname","handleFetchData","split","error","_type","content","AppContainer","div","AppLogo","nav"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { useLocation } from 'react-router'\nimport styled from 'styled-components'\nimport GlobalStyles from './GlobalStyles'\nimport './App.css'\n\nimport { getSongData, getArtistData, getRandomSongs } from './services/lyrics'\n\nimport Loader from './components/Loader'\nimport SearchBar from './components/SearchBar'\nimport SwitchSection from './components/SwitchSection'\n\nimport appLogo from './components/Nav/img/appLogo.png'\n\nfunction App() {\n  const [loadingStatus, setLoadingStatus] = useState(false)\n  const [data, setData] = useState(null)\n  const location = useLocation()\n\n  // Have you ever had lyrics of a song stuck in your head that you cant recall the name of?\n  const fetchData = async (id, type) => {\n    switch(type) {\n      case 'song':\n        return await getSongData(id)\n      case 'artist':\n        return await getArtistData(id)\n      default:\n        return null\n    }\n  }\n\n  const handleDataChange = async (id, type) => {\n    window.location.pathname = `/${type}/${id}`\n  }\n\n  useEffect(() => {\n    async function handleFetchData () {\n      setLoadingStatus(true)\n      try {\n        setData(await fetchData(location.pathname.split('/')[2], location.pathname.split('/')[1]))\n      } catch (error) {\n        setData({ _type: 'error', content: '404' })\n      }\n      setLoadingStatus(false)\n    }\n\n    handleFetchData()\n  }, [location])\n\n  return (\n    <AppContainer>\n      <GlobalStyles />\n      <AppLogo>\n        <Link to='/'>\n          <img src={appLogo} alt='scuffed spotify' /> Spotifi\n        </Link>\n      </AppLogo>\n      <SearchBar setData={handleDataChange} />\n      {loadingStatus\n        ? <Loader />\n        : data && <SwitchSection data={data} handleSelect={handleDataChange} />\n      }\n    </AppContainer>\n  )\n}\n\nconst AppContainer = styled.div`\n  padding: 0 1em 1em 1em;\n  margin: 0;\n`\n\nconst AppLogo = styled.nav`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 1em 0;\n  cursor: pointer;\n  column-gap: 0.2em;\n\n  & > img {\n    height: 2em;\n    width: auto;\n  }\n`\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}