{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\energ\\\\Documents\\\\GitHub\\\\music-app\\\\client\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport './App.css';\nimport styled from 'styled-components';\nimport { search, getSongData } from './services/lyrics';\nimport SearchBar from './components/SearchBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [searchResultData, setSearchResultData] = useState({\n    songs: [],\n    artists: [],\n    albums: []\n  });\n  const [searchStatusLoading, setSearchStatusLoading] = useState(false);\n  const [searchInputValue, setSearchInputValue] = useState(\"\");\n  const [expanded, setExpanded] = useState(false);\n  const [selectedSongId, setSelectedSongId] = useState(null);\n  const [selectedSongData, setSelectedSongData] = useState(null); // Have you ever had lyrics of some song that you dont remember the name stuck in your head?\n\n  useEffect(() => {\n    const fetchMyAPI = async () => {\n      if (searchInputValue.length > 0) {\n        setSearchStatusLoading(true);\n        let response = await search(searchInputValue);\n        setSearchResultData(response);\n        setSearchStatusLoading(false);\n      } else {\n        setSearchResultData({\n          songs: [],\n          artists: [],\n          albums: []\n        });\n      }\n    }; // Timeout set to avoid overlapping requests\n\n\n    const timeoutId = setTimeout(() => fetchMyAPI(), 100);\n    return () => clearTimeout(timeoutId);\n  }, [searchInputValue]);\n  useEffect(() => {\n    const fetchMyAPI = async () => {\n      if (selectedSongId) {\n        const songData = await getSongData(selectedSongId);\n        setSelectedSongData(songData);\n      }\n    };\n\n    fetchMyAPI();\n  }, [selectedSongId]);\n\n  const toggleExpanded = () => {\n    setExpanded(!expanded);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AppContainer, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \" Search \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \" Lyrics \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), selectedSongData && /*#__PURE__*/_jsxDEV(Lyrics, {\n      dangerouslySetInnerHTML: {\n        __html: selectedSongData.lyrics.replaceAll(\"[\", \"<span>[\").replaceAll(\"]\", \"]</span>\")\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 12\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"8dFskf+E+4uCPFliYcWuwcWeqDQ=\");\n\n_c = App;\nconst AppContainer = styled.div`\n  padding: 0 1em;\n  margin: 0;\n`;\n_c2 = AppContainer;\nconst Lyrics = styled.div`\n  white-space: pre-wrap;\n  width: fit-content;\n\n  & span {\n    font-weight: bold;\n  }\n`;\n_c3 = Lyrics;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"AppContainer\");\n$RefreshReg$(_c3, \"Lyrics\");","map":{"version":3,"sources":["C:/Users/energ/Documents/GitHub/music-app/client/src/App.js"],"names":["useState","useEffect","styled","search","getSongData","SearchBar","App","searchResultData","setSearchResultData","songs","artists","albums","searchStatusLoading","setSearchStatusLoading","searchInputValue","setSearchInputValue","expanded","setExpanded","selectedSongId","setSelectedSongId","selectedSongData","setSelectedSongData","fetchMyAPI","length","response","timeoutId","setTimeout","clearTimeout","songData","toggleExpanded","__html","lyrics","replaceAll","AppContainer","div","Lyrics"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,SAASC,MAAT,EAAiBC,WAAjB,QAAoC,mBAApC;AACA,OAAOC,SAAP,MAAsB,wBAAtB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CR,QAAQ,CAAC;AAAES,IAAAA,KAAK,EAAE,EAAT;AAAaC,IAAAA,OAAO,EAAE,EAAtB;AAA0BC,IAAAA,MAAM,EAAE;AAAlC,GAAD,CAAxD;AACA,QAAM,CAACC,mBAAD,EAAsBC,sBAAtB,IAAgDb,QAAQ,CAAC,KAAD,CAA9D;AACA,QAAM,CAACc,gBAAD,EAAmBC,mBAAnB,IAA0Cf,QAAQ,CAAC,EAAD,CAAxD;AACA,QAAM,CAACgB,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACkB,cAAD,EAAiBC,iBAAjB,IAAsCnB,QAAQ,CAAC,IAAD,CAApD;AACA,QAAM,CAACoB,gBAAD,EAAmBC,mBAAnB,IAA0CrB,QAAQ,CAAC,IAAD,CAAxD,CANa,CAQb;;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMqB,UAAU,GAAG,YAAY;AAC7B,UAAGR,gBAAgB,CAACS,MAAjB,GAA0B,CAA7B,EAAgC;AAC9BV,QAAAA,sBAAsB,CAAC,IAAD,CAAtB;AACA,YAAIW,QAAQ,GAAG,MAAMrB,MAAM,CAACW,gBAAD,CAA3B;AAEAN,QAAAA,mBAAmB,CAACgB,QAAD,CAAnB;AACAX,QAAAA,sBAAsB,CAAC,KAAD,CAAtB;AACD,OAND,MAMO;AACLL,QAAAA,mBAAmB,CAAC;AAAEC,UAAAA,KAAK,EAAE,EAAT;AAAaC,UAAAA,OAAO,EAAE,EAAtB;AAA0BC,UAAAA,MAAM,EAAE;AAAlC,SAAD,CAAnB;AACD;AACF,KAVD,CADc,CAad;;;AACA,UAAMc,SAAS,GAAGC,UAAU,CAAC,MAAMJ,UAAU,EAAjB,EAAqB,GAArB,CAA5B;AACA,WAAO,MAAMK,YAAY,CAACF,SAAD,CAAzB;AACD,GAhBQ,EAgBN,CAACX,gBAAD,CAhBM,CAAT;AAkBAb,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMqB,UAAU,GAAG,YAAY;AAC7B,UAAGJ,cAAH,EAAmB;AACjB,cAAMU,QAAQ,GAAG,MAAMxB,WAAW,CAACc,cAAD,CAAlC;AACAG,QAAAA,mBAAmB,CAACO,QAAD,CAAnB;AACD;AACF,KALD;;AAOAN,IAAAA,UAAU;AACX,GATQ,EASN,CAACJ,cAAD,CATM,CAAT;;AAWA,QAAMW,cAAc,GAAG,MAAM;AAC3BZ,IAAAA,WAAW,CAAC,CAACD,QAAF,CAAX;AACD,GAFD;;AAIA,sBACE,QAAC,YAAD;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,EAIGI,gBAAgB,iBACZ,QAAC,MAAD;AAAQ,MAAA,uBAAuB,EAAE;AAAEU,QAAAA,MAAM,EAAEV,gBAAgB,CAACW,MAAjB,CAAwBC,UAAxB,CAAmC,GAAnC,EAAwC,SAAxC,EAAmDA,UAAnD,CAA8D,GAA9D,EAAmE,UAAnE;AAAV;AAAjC;AAAA;AAAA;AAAA;AAAA,YALP;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GAtDQ1B,G;;KAAAA,G;AAwDT,MAAM2B,YAAY,GAAG/B,MAAM,CAACgC,GAAI;AAChC;AACA;AACA,CAHA;MAAMD,Y;AAKN,MAAME,MAAM,GAAGjC,MAAM,CAACgC,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;MAAMC,M;AASN,eAAe7B,GAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport './App.css'\nimport styled from 'styled-components'\n\nimport { search, getSongData } from './services/lyrics'\nimport SearchBar from './components/SearchBar'\n\nfunction App() {\n  const [searchResultData, setSearchResultData] = useState({ songs: [], artists: [], albums: [] })\n  const [searchStatusLoading, setSearchStatusLoading] = useState(false)\n  const [searchInputValue, setSearchInputValue] = useState(\"\")\n  const [expanded, setExpanded] = useState(false)\n  const [selectedSongId, setSelectedSongId] = useState(null)\n  const [selectedSongData, setSelectedSongData] = useState(null)\n\n  // Have you ever had lyrics of some song that you dont remember the name stuck in your head?\n\n  useEffect(() => {\n    const fetchMyAPI = async () => {\n      if(searchInputValue.length > 0) {\n        setSearchStatusLoading(true)\n        let response = await search(searchInputValue)\n\n        setSearchResultData(response)\n        setSearchStatusLoading(false)\n      } else {\n        setSearchResultData({ songs: [], artists: [], albums: [] })\n      }\n    }\n\n    // Timeout set to avoid overlapping requests\n    const timeoutId = setTimeout(() => fetchMyAPI(), 100)\n    return () => clearTimeout(timeoutId)\n  }, [searchInputValue])\n  \n  useEffect(() => {\n    const fetchMyAPI = async () => {\n      if(selectedSongId) {\n        const songData = await getSongData(selectedSongId)\n        setSelectedSongData(songData)\n      }\n    }\n    \n    fetchMyAPI()\n  }, [selectedSongId])\n\n  const toggleExpanded = () => {\n    setExpanded(!expanded)\n  }\n\n  return (\n    <AppContainer>\n      <h2> Search </h2>\n      <SearchBar />\n      <h2> Lyrics </h2>\n      {selectedSongData\n        && <Lyrics dangerouslySetInnerHTML={{ __html: selectedSongData.lyrics.replaceAll(\"[\", \"<span>[\").replaceAll(\"]\", \"]</span>\") }} />\n      }\n      \n    </AppContainer>\n  )\n}\n\nconst AppContainer = styled.div`\n  padding: 0 1em;\n  margin: 0;\n`\n\nconst Lyrics = styled.div`\n  white-space: pre-wrap;\n  width: fit-content;\n\n  & span {\n    font-weight: bold;\n  }\n`\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}