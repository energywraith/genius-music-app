{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\energ\\\\Documents\\\\GitHub\\\\music-app\\\\client\\\\src\\\\components\\\\SearchBar\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { search } from '../../services/lyrics';\nimport SearchResults from './SearchResults';\nimport Loader from '../Loader';\nimport { Container } from './index.style';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchBar = ({\n  setData\n}) => {\n  _s();\n\n  const [searchInputValue, setSearchInputValue] = useState('');\n  const [results, setResults] = useState({\n    songs: [],\n    artists: [],\n    albums: []\n  });\n  const [expanded, setExpanded] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      if (searchInputValue.length > 0) {\n        let response = await search(searchInputValue);\n        setResults(response);\n      } else {\n        setResults({\n          songs: [],\n          artists: [],\n          albums: []\n        });\n      }\n    }; // Timeout set to avoid overlapping requests\n\n\n    const timeoutId = setTimeout(() => fetchData(), 250);\n    return () => clearTimeout(timeoutId);\n  }, [searchInputValue]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    onFocus: () => setExpanded(true),\n    onBlur: () => setExpanded(false),\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Search a lyrics, name, album or author\",\n      value: searchInputValue,\n      onChange: ({\n        target\n      }) => setSearchInputValue(target.value),\n      spellCheck: \"false\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchResults, {\n      results: results,\n      handleSelect: setData,\n      expanded: expanded\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SearchBar, \"SRpgEJDpE9Bu3sWizDw77aCNm80=\");\n\n_c = SearchBar;\nexport default SearchBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"sources":["C:/Users/energ/Documents/GitHub/music-app/client/src/components/SearchBar/index.js"],"names":["useEffect","useState","search","SearchResults","Loader","Container","SearchBar","setData","searchInputValue","setSearchInputValue","results","setResults","songs","artists","albums","expanded","setExpanded","fetchData","length","response","timeoutId","setTimeout","clearTimeout","target","value"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,MAAT,QAAuB,uBAAvB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,SAASC,SAAT,QAA0B,eAA1B;;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAAA;;AACjC,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CR,QAAQ,CAAC,EAAD,CAAxD;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC;AAAEW,IAAAA,KAAK,EAAE,EAAT;AAAaC,IAAAA,OAAO,EAAE,EAAtB;AAA0BC,IAAAA,MAAM,EAAE;AAAlC,GAAD,CAAtC;AAEA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC,KAAD,CAAxC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiB,SAAS,GAAG,YAAY;AAC5B,UAAGT,gBAAgB,CAACU,MAAjB,GAA0B,CAA7B,EAAgC;AAC9B,YAAIC,QAAQ,GAAG,MAAMjB,MAAM,CAACM,gBAAD,CAA3B;AACAG,QAAAA,UAAU,CAACQ,QAAD,CAAV;AACD,OAHD,MAGO;AACLR,QAAAA,UAAU,CAAC;AAAEC,UAAAA,KAAK,EAAE,EAAT;AAAaC,UAAAA,OAAO,EAAE,EAAtB;AAA0BC,UAAAA,MAAM,EAAE;AAAlC,SAAD,CAAV;AACD;AACF,KAPD,CADc,CAUd;;;AACA,UAAMM,SAAS,GAAGC,UAAU,CAAC,MAAMJ,SAAS,EAAhB,EAAoB,GAApB,CAA5B;AACA,WAAO,MAAMK,YAAY,CAACF,SAAD,CAAzB;AACD,GAbQ,EAaN,CAACZ,gBAAD,CAbM,CAAT;AAeA,sBACE,QAAC,SAAD;AAAW,IAAA,OAAO,EAAE,MAAMQ,WAAW,CAAC,IAAD,CAArC;AAA6C,IAAA,MAAM,EAAE,MAAMA,WAAW,CAAC,KAAD,CAAtE;AAAA,4BAEE;AACE,MAAA,WAAW,EAAC,wCADd;AAEE,MAAA,KAAK,EAAER,gBAFT;AAGE,MAAA,QAAQ,EAAE,CAAC;AAACe,QAAAA;AAAD,OAAD,KAAcd,mBAAmB,CAACc,MAAM,CAACC,KAAR,CAH7C;AAIE,MAAA,UAAU,EAAC;AAJb;AAAA;AAAA;AAAA;AAAA,YAFF,eAOE,QAAC,aAAD;AAAe,MAAA,OAAO,EAAEd,OAAxB;AAAiC,MAAA,YAAY,EAAEH,OAA/C;AAAwD,MAAA,QAAQ,EAAEQ;AAAlE;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAhCD;;GAAMT,S;;KAAAA,S;AAkCN,eAAeA,SAAf","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport { search } from '../../services/lyrics'\r\nimport SearchResults from './SearchResults'\r\nimport Loader from '../Loader'\r\n\r\nimport { Container } from './index.style'\r\n\r\nconst SearchBar = ({ setData }) => {\r\n  const [searchInputValue, setSearchInputValue] = useState('')\r\n  const [results, setResults] = useState({ songs: [], artists: [], albums: [] })\r\n\r\n  const [expanded, setExpanded] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      if(searchInputValue.length > 0) {\r\n        let response = await search(searchInputValue)\r\n        setResults(response)\r\n      } else {\r\n        setResults({ songs: [], artists: [], albums: [] })\r\n      }\r\n    }\r\n\r\n    // Timeout set to avoid overlapping requests\r\n    const timeoutId = setTimeout(() => fetchData(), 250)\r\n    return () => clearTimeout(timeoutId)\r\n  }, [searchInputValue])\r\n\r\n  return (\r\n    <Container onFocus={() => setExpanded(true)} onBlur={() => setExpanded(false)}>\r\n      {/* <h2> Search </h2> */}\r\n      <input\r\n        placeholder='Search a lyrics, name, album or author'\r\n        value={searchInputValue}\r\n        onChange={({target}) => setSearchInputValue(target.value)}\r\n        spellCheck='false' />\r\n      <SearchResults results={results} handleSelect={setData} expanded={expanded} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default SearchBar"]},"metadata":{},"sourceType":"module"}