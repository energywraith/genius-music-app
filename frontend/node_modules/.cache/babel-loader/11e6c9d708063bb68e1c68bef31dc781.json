{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\energ\\\\Documents\\\\GitHub\\\\music-app\\\\client\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport GlobalStyles from './GlobalStyles';\nimport './App.css';\nimport { getSongData, getArtistData } from './services/lyrics';\nimport Loader from './components/Loader';\nimport SearchBar from './components/SearchBar';\nimport SongSection from './components/SongSection';\nimport appLogo from './components/Nav/img/appLogo.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [loadingStatus, setLoadingStatus] = useState(false); // Songs\n\n  const [selectedSongId, setSelectedSongId] = useState(null);\n  const [selectedSongData, setSelectedSongData] = useState(null); // Artists\n\n  const [selectedArtistId, setSelectedArtistId] = useState(null);\n  const [selectedArtistData, setSelectedArtistData] = useState(null); // Have you ever had lyrics of a song stuck in your head that you cant recall the name of?\n\n  useEffect(() => {\n    const fetchMyAPI = async () => {\n      if (selectedSongId) {\n        setLoadingStatus(true);\n        const songData = await getSongData(selectedSongId);\n        setSelectedSongData(songData);\n        setLoadingStatus(false);\n      }\n    };\n\n    fetchMyAPI();\n  }, [selectedSongId]);\n  useEffect(() => {\n    const fetchMyAPI = async () => {\n      if (selectedArtistId) {\n        setLoadingStatus(true);\n        const artistData = await getArtistData(selectedArtistId);\n        setSelectedArtistData(artistData);\n        setLoadingStatus(false);\n      }\n    };\n\n    fetchMyAPI();\n  }, [selectedArtistId]);\n  console.log(selectedArtistData);\n  return /*#__PURE__*/_jsxDEV(AppContainer, {\n    children: [/*#__PURE__*/_jsxDEV(GlobalStyles, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => {\n        setSelectedSongData(null);\n        setSelectedSongId(null);\n      },\n      style: {\n        width: '100%',\n        height: '100%',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        fontSize: '1em',\n        padding: '1em 0',\n        cursor: 'pointer'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: appLogo,\n        alt: \"scuffed spotify\",\n        style: {\n          height: '2em',\n          width: 'auto'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), \" Spotifi\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      setSelectedSongId: setSelectedSongId,\n      setSelectedArtistId: setSelectedArtistId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), loadingStatus ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }, this) : selectedArtistData && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        background: 'red'\n      },\n      children: [selectedArtistData.name, selectedArtistData.description_preview]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"N2QN93FN7pLNafkknPgHTpfWuLI=\");\n\n_c = App;\nconst AppContainer = styled.div`\n  padding: 0 1em 1em 1em;\n  margin: 0;\n`;\n_c2 = AppContainer;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"AppContainer\");","map":{"version":3,"sources":["C:/Users/energ/Documents/GitHub/music-app/client/src/App.js"],"names":["useState","useEffect","styled","GlobalStyles","getSongData","getArtistData","Loader","SearchBar","SongSection","appLogo","App","loadingStatus","setLoadingStatus","selectedSongId","setSelectedSongId","selectedSongData","setSelectedSongData","selectedArtistId","setSelectedArtistId","selectedArtistData","setSelectedArtistData","fetchMyAPI","songData","artistData","console","log","width","height","display","justifyContent","alignItems","fontSize","padding","cursor","background","name","description_preview","AppContainer","div"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport GlobalStyles from './GlobalStyles'\nimport './App.css'\n\nimport { getSongData, getArtistData } from './services/lyrics'\n\nimport Loader from './components/Loader'\nimport SearchBar from './components/SearchBar'\nimport SongSection from './components/SongSection'\n\nimport appLogo from './components/Nav/img/appLogo.png'\n\nfunction App() {\n  const [loadingStatus, setLoadingStatus] = useState(false)\n  // Songs\n  const [selectedSongId, setSelectedSongId] = useState(null)\n  const [selectedSongData, setSelectedSongData] = useState(null)\n  // Artists\n  const [selectedArtistId, setSelectedArtistId] = useState(null)\n  const [selectedArtistData, setSelectedArtistData] = useState(null)\n\n  // Have you ever had lyrics of a song stuck in your head that you cant recall the name of?\n\n  useEffect(() => {\n    const fetchMyAPI = async () => {\n      if(selectedSongId) {\n        setLoadingStatus(true)\n        const songData = await getSongData(selectedSongId)\n        setSelectedSongData(songData)\n        setLoadingStatus(false)\n      }\n    }\n\n    fetchMyAPI()\n  }, [selectedSongId])\n\n  useEffect(() => {\n    const fetchMyAPI = async () => {\n      if(selectedArtistId) {\n        setLoadingStatus(true)\n        const artistData = await getArtistData(selectedArtistId)\n        setSelectedArtistData(artistData)\n        setLoadingStatus(false)\n      }\n    }\n\n    fetchMyAPI()\n  }, [selectedArtistId])\n\n  console.log(selectedArtistData)\n\n  return (\n    <AppContainer>\n      <GlobalStyles />\n      <div \n      onClick={() => {setSelectedSongData(null); setSelectedSongId(null)}} \n      style={{ width: '100%', height: '100%', display: 'flex', justifyContent: 'center', alignItems: 'center', fontSize: '1em', padding: '1em 0', cursor: 'pointer' }}>\n        <img src={appLogo} alt='scuffed spotify' style={{ height: '2em', width: 'auto' }}/> Spotifi\n      </div>\n      <SearchBar setSelectedSongId={setSelectedSongId} setSelectedArtistId={setSelectedArtistId} />\n      {/* {loadingStatus\n        ? <Loader />\n        : <SongSection details={selectedSongData} />\n      } */}\n      {loadingStatus\n        ? <Loader />\n        : selectedArtistData &&\n          <div style={{ background: 'red' }}>\n            {selectedArtistData.name}\n            {selectedArtistData.description_preview}\n          </div>\n      }\n    </AppContainer>\n  )\n}\n\nconst AppContainer = styled.div`\n  padding: 0 1em 1em 1em;\n  margin: 0;\n`\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}